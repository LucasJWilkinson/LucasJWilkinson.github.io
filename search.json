[
  {
    "objectID": "posts/the-mlb-regular-season-is-pointless/index.html",
    "href": "posts/the-mlb-regular-season-is-pointless/index.html",
    "title": "The MLB regular season is useless.",
    "section": "",
    "text": "The 2022 MLB season contained a new postseason platform. MLB expanded the bracket to allow one more wild-card team from each league. This means that six teams from the National League will make the postseason. The two teams with the best record received a first-round bye, and the other four teams faced off in a three-game series to advance to the next round.\nThe National League East was a highlighted division entering the 2022 Major League Baseball season, because of the expected competition to arise throughout the season. The Atlanta Braves were World Series champions in the season prior. The New York Mets loaded up with talent over the offseason, and the Philadelphia Phillies signed Kyle Schwarber and Nick Castellanos to multi-year deals. Spoiler alert, all three teams made the postseason.\nThe Phillies roster was the sixth highest payroll in the 2022 season, however they got off to a 22-29 start through their first 51 games. This led to the Phillies firing manager Joe Girardi, and putting the team in the hands of Rob Thompson. The Phillies record under Thompson was 65-46.\n\n\nCode\nlibrary(tidyverse)\nlibrary(ggalt)\nlibrary(gt)\nlibrary(ggrepel)\n\nNLStandings <- read_csv(\"~/Documents/SPMC 350 - Fall 2022/NationalLeagueStandings2.csv\") %>%\n  filter(Rk > 0 )\n\nmlb_hitting <- read_csv(\"~/Documents/SPMC 350 - Fall 2022/MLB-HITTING.csv\") \nmlb_pitching <- read_csv(\"~/Documents/SPMC 350 - Fall 2022/mlb-pitching.csv\")\ncombined <- mlb_hitting %>% inner_join(mlb_pitching, by = c(\"Tm\", \"G\"))\n\nSimpleStandings <- NLStandings %>% \n  select(Tm, W, L, GB)\n\nStandings <- NLStandings %>% \n  separate(\"500\", into=c(\"Wins\", \"Losses\"), sep=\"-\") \n\nChartData <- Standings %>% \n  select(\n    Tm, W, Wins\n  ) %>% mutate(Wins = as.numeric(Wins)) %>%\n  rename(`Total Wins` = W, `Quality Wins` = Wins) %>%\n  mutate(Wins = `Total Wins` - `Quality Wins`) %>%\n  select(Tm, Wins, `Quality Wins`)\n\nChartData %>% \n  pivot_longer(\n    cols=-Tm, \n    names_to=\"Type\", \n    values_to=\"Total\") -> Stacked\n\nph <- mlb_hitting %>% filter(Tm == \"Philadelphia Phillies\")\npi <- mlb_pitching %>% filter(Tm == \"Philadelphia Phillies\")\nphils <- combined %>% filter(Tm == \"Philadelphia Phillies\")\n\nSimpleStandings %>% \n  gt() %>% \n  tab_header(\n    title = \"The Phillies were a mid-tier National League team in the 2022 regular season\",\n    subtitle = \"Philadelphia played just good enough to make the playoffs\"\n  ) %>% tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n)%>% tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %>%\n  tab_source_note(\n    source_note = md(\"**By:** Lucas Wilkinson  |  **Source:** [Sports Reference](https://www.baseball-reference.com/leagues/NL/2022-standings.shtml)\")\n  ) %>%\ntab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) %>%\n  opt_row_striping() %>% \n  opt_table_lines(\"none\") %>%\n\n  tab_style(\n    style = list(\n      cell_fill(color = \"#002D72\"), \n      cell_text(color = \"#E81828\")\n      ),\n    locations = cells_body(\n      rows = Tm == \"Philadelphia Phillies\")\n  )\n\n\n\n\n\n\n  \n    \n      The Phillies were a mid-tier National League team in the 2022 regular season\n    \n    \n      Philadelphia played just good enough to make the playoffs\n    \n  \n  \n    \n      Tm\n      W\n      L\n      GB\n    \n  \n  \n    Los Angeles Dodgers\n111\n51\n+24.0\n    Atlanta Braves\n101\n61\n+14.0\n    New York Mets\n101\n61\n+14.0\n    St. Louis Cardinals\n93\n69\n+6.0\n    San Diego Padres\n89\n73\n+2.0\n    Philadelphia Phillies\n87\n75\n--\n    Milwaukee Brewers\n86\n76\n1.0\n    San Francisco Giants\n81\n81\n6.0\n    Chicago Cubs\n74\n88\n13.0\n    Arizona Diamondbacks\n74\n88\n13.0\n    Miami Marlins\n69\n93\n18.0\n    Colorado Rockies\n68\n94\n19.0\n    Cincinnati Reds\n62\n100\n25.0\n    Pittsburgh Pirates\n62\n100\n25.0\n    Washington Nationals\n55\n107\n32.0\n  \n  \n    \n      By: Lucas Wilkinson  |  Source: Sports Reference\n    \n  \n  \n\n\n\n\nThe Phillies limped into the postseason this year as the sixth seed in the playoffs. The standings visually show how close the race was. However, the Phillies were not really a hot team to end the season. They went 7-13 in their last 20 games, and lost the last two games of the season. The Phillies finished 3rd place in the NL East.\n\n\nCode\nggplot() + \n  geom_bar(\n    data=Stacked, \n    aes(x=reorder(Tm,Total), weight=Total, fill=Type)) + \n  scale_fill_manual(values = c(\"#002D72\", \"#E81828\")) + \n  coord_flip() + \n  labs(\n    x=\"\", \n    y=\"Total Wins\", \n    title=\"Phillies did not beat many quality \\nteams in the regular season.\", \n    subtitle=\"Philadelphia was near the bottom of the National League vs. teams >.500\",\n    caption = \"Source: Sports Reference | By Lucas Wilkinson\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 20, face = \"bold\"),\n    plot.title.position = \"plot\" , \n    axis.title = element_text(size = 8, face =\"bold\"), \n    plot.subtitle = element_text(size=12), \n    panel.grid.minor = element_blank() \n  )\n\n\n\n\n\nThe Phillies also were not beating many teams above .500. I classified those wins as quality wins. Philadelphia was 34-47 against quality teams. I am still unsure how they were so bad against good teams until they reached the playoffs.\n\n\nCode\nggplot() + \n  geom_point(data=combined, aes(x=ERA, y=BA)) +\n    geom_point(data=phils, aes(x=ERA, y=BA), color=\"#E81828\") +\n  coord_flip()+ \n  \n  geom_point(data=phils, aes(x=`ERA`, y=`BA`), color=\"#E81828\") + \n  geom_text_repel(data=phils, aes(x=`ERA`, y=`BA`, label=\"Phillies\")) +\n    \n  geom_vline(xintercept = 3.96) + \n  geom_hline(yintercept = .243) +\n  \n   labs(\n    x=\"ERA\", \n    y=\"Offensive Batting Average\", \n    title=\"Philadelphia was average in team ERA, \\nnot amazing at hitting.\", \n    subtitle=\"The Phillies had an okay regular season in many aspects.\",\n    caption = \"Source: Sports Reference | By Lucas Wilkinson\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 20, face = \"bold\"),\n    axis.title = element_text(size = 8, face = \"bold\"), \n    plot.subtitle = element_text(size=10) \n  )\n\n\n\n\n\nI correlated team ERA (pitching) and offensive batting average to see how Philadelphia matched up against every MLB team over the season. The black lines are league averages. The Phillies were right at average for team ERA, and just above the league average for team batting average. These stats are not the only way to define an offense and defense, but they are a good starting point.\nThe NLCS contained the fifth and sixth seeded teams. I donâ€™t believe this should happen often, and if MLB wants to stay relevant they need their best teams playing late in the postseason. The 162 game season is starting to seem outdated. I believe the MLB should rethink either the regular season platform, or the postseason platform."
  },
  {
    "objectID": "posts/best-player-on-mets/index.html",
    "href": "posts/best-player-on-mets/index.html",
    "title": "Who was the best player on the 1986 Mets?",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(ggalt)\nlibrary(gt)\nlibrary(ggrepel)\nlibrary(cowplot)\n\nHitting <- read_csv(\"~/Documents/SPMC 350 - Fall 2022/Mets1986a.csv\") %>%\n  filter(Rk > 0, PA >100)\n\nPitching <- read_csv(\"~/Documents/SPMC 350 - Fall 2022/Mets1986Pitchinga.csv\") %>%\n  filter(Rk > 0)\n\nDefense <- read_csv(\"~/Documents/SPMC 350 - Fall 2022/Mets1986D.csv\")\n\nthekid <- Hitting %>% filter(Name == \"Gary Carter\")\n\nDoc <- Pitching %>% filter(Name == \"Dwight Gooden\")\n\nBob <- Pitching %>% filter(Name == \"Bob Ojeda\")\n\nJesse <- Pitching %>% filter(Name == \"Jesse Orosco\")\n\nValuedStats <- read_csv(\"~/Documents/SPMC 350 - Fall 2022/ValuedStats.csv\") %>%\n  filter(PA > 100, G < 200)\n\nbar1 <- ggplot() + \n  geom_bar(data=Hitting,  aes( x=reorder(Name, -`PA`), weight=`PA`)) +\n  geom_bar(data=thekid,  aes( x=reorder(Name, -`PA`), weight=`PA`), fill=\"#002D72\") +\n  coord_flip() +\nlabs(\n    title=\"Most usage for the 1986 Mets...\", \n    subtitle = \"                   Gary Carter drove in the most runs without the most plate appearances\" ,\n    x=\"\", \n    y=\"Plate Appearances\") + \n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10),\n    plot.title.position = \"plot\" , \n    panel.grid.minor = element_blank()\n    )\n\nbar2 <- ggplot() + \n  geom_bar(data=Hitting,  aes( x=reorder(Name, -`RBI`), weight=`RBI`)) +\n  geom_bar(data=thekid,  aes( x=reorder(Name, -`RBI`), weight=`RBI`), fill=\"#002D72\") +\n  coord_flip() +\nlabs(\n    title=\"... and top run producers.\", \n    subtitle= \"\",\n    x=\"\", \n    y=\"RBI's\",\n    caption=\"Source: Sports Reference | By Lucas Wilkinson\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10),\n    plot.title.position = \"plot\" , \n    panel.grid.minor = element_blank()\n    )\n\nplot_grid(bar1, bar2) \n\n\n\n\n\nGary Carter was put on the 15-day disabled list in the middle of August due to a thumb injury. Since Carter missed a couple weeks because of an injury, and being a catcher, he only played in 132 games in the regular season. If Carter had the chance to step up to the plate as much as Hernandez, he could have reached nearly 120 rbiâ€™s with 30 home runs for the year.\nClaiming a player is better just because they produce more rbiâ€™s than the other is unfair to Keith Hernandez. Hernandez had the highest on-base percentage on the team, while hitting third in the lineup. This gave Gary Carter many opportunities to drive in runs.\n\n\nCode\nggplot() + \n  geom_dumbbell(\n    data=ValuedStats, \n    aes(y=reorder(Name, WAR), x=WAR, xend=dWAR),\n    size = 1,\n    color = \"grey\",\n    colour_x = \"#002D72\",\n    colour_xend = \"#FF5910\") + \n  labs(\n    x=\"WAR\", \n    y=\"\", \n    title=\"Keith Hernandez aquired the highest \\nWAR in the regular season.\", \n    subtitle=\"Lenny Dykstra is surprisingly the next highest on the list\",\n    caption = \"Source: Sports Reference | By Lucas Wilkinson\") +\n  theme_minimal() +\n    theme(\n    plot.title = element_text(size = 20, face = \"bold\"),\n    plot.title.position = \"plot\" , \n    axis.title = element_text(size = 8, face = \"bold\"), \n    plot.subtitle = element_text(size=10,) \n  )\n\n\n\n\n\nThe orange dot on the graph represents defensive WAR, while the blue dot represents a playerâ€™s total WAR. Keith Hernandez acquired the highest total WAR on the team, and Lenny Dykstra somehow totaled a higher WAR than Gary Carter and Daryl Strawberry in the 1986 season.\nOther notable takeaways from this graph are that Daryl Strawberry had a negative defensive WAR, but made up for it with his bat. Rafael Santana is the only player to have a higher defensive WAR than total WAR, which is hard to accomplish.\n\n\nCode\nggplot() + \n  geom_point(data=Pitching, aes(x=IP, y=ERA)) +\n    geom_point(data=Doc, aes(x=IP, y=ERA), color=\"#002D72\") +\n  coord_flip()+ \n  \n  geom_point(data=Doc, aes(x=`IP`, y=`ERA`), color=\"#FF5910\") + \n  geom_text_repel(data=Doc, aes(x=`IP`, y=`ERA`, label=\"Dwight Gooden\")) +\n  \n  geom_point(data=Bob, aes(x=`IP`, y=`ERA`), color=\"#FF5910\") + \n  geom_text_repel(data=Bob, aes(x=`IP`, y=`ERA`, label=\"Bob Ojeda\")) +\n  \n  geom_point(data=Jesse, aes(x=`IP`, y=`ERA`), color=\"#FF5910\") + \n  geom_text_repel(data=Jesse, aes(x=`IP`, y=`ERA`, label=\"Jesse Orosco\")) +\n    \n  geom_vline(xintercept = 98.9333333) + \n  geom_hline(yintercept = 3.11) +\n  geom_text(aes(y=1, x=150, label=\"Good ERA, High Usage\"), color=\"blue\") +\n  geom_text(aes(y=5, x=50, label=\"Bad ERA, Low Usage\"), color=\"blue\") +\n  \n  labs(\n    x=\"Innings Pitched\", \n    y=\"Earned Run Average\", \n    title=\"Dwight Gooden was a shell of his 1985 self.\", \n    subtitle=\"Gooden was still the best pitcher on the '86 Mets\",\n    caption = \"Source: Sports Reference | By Lucas Wilkinson\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 20, face = \"bold\"),\n    axis.title = element_text(size = 8, face = \"bold\"), \n    plot.title.position = \"plot\" , \n    plot.subtitle = element_text(size=10,) \n  )\n\n\n\n\n\nThe 1986 New York Mets would not have been a great team if their pitching wasnâ€™t at least decent. The Mets staff featured Dwight Gooden, Ron Darling and Bob Ojeda. Dwight Gooden won the CY Young award in 1985 with one of the best pitching seasons ever, but he could not quite keep that pace in the 1986 season. Ojeda pitched great all season long, and Gooden still had the arm to intimidate the gamesâ€™ best players.\nEvery player played a perfect role on that Mets team. Keith Hernandez was a defensive guru with a great bat, Mookie Wilson had the speed the team needed, Darryl Strawberry had serious pop in his bat, and Lenny Dykstra was a hard-knock who would do anything for New York to win.\nI personally believe that Keith Hernandez had the best season on the 1986 Mets. His ability to lead the team, while also having the highest on-base percentage and runs scored is the deciding factor for me."
  },
  {
    "objectID": "First-graph-for-project.html",
    "href": "First-graph-for-project.html",
    "title": "Lucas Wilkinson | Blog",
    "section": "",
    "text": "NLStandings <- read_csv(\"~/Documents/SPMC 350 - Fall 2022/NationalLeagueStandings2.csv\") %>%\n  filter(Rk > 0 )\n\nRows: 16 Columns: 30\nâ”€â”€ Column specification â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\nDelimiter: \",\"\nchr (20): Tm, GB, GBsum, Strk, pythWL, vEast, vCent, vWest, Inter, Home, Roa...\ndbl (10): Rk, W, L, W-L%, R, RA, Rdiff, SOS, SRS, Luck\n\nâ„¹ Use `spec()` to retrieve the full column specification for this data.\nâ„¹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nRight here I want to make a table of the NL 2022 standings, with the Phillies highlighted Phillie color showing how they were mid during the regular season.\n\nSimpleStandings <- NLStandings %>% \n  select(Tm, W, L, GB)\n\n\nSimpleStandings %>% \n  gt() %>% \n  tab_header(\n    title = \"The Phillies were a mid-tier National League team in the 2022 regular season\",\n    subtitle = \"Philadelphia played just good enough to make the playoffs\"\n  ) %>% tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n)%>% tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %>%\n  tab_source_note(\n    source_note = md(\"**By:** Lucas Wilkinson  |  **Source:** [Sports Reference](https://www.baseball-reference.com/leagues/NL/2022-standings.shtml)\")\n  ) %>%\ntab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) %>%\n  opt_row_striping() %>% \n  opt_table_lines(\"none\") %>%\n\n  tab_style(\n    style = list(\n      cell_fill(color = \"#002D72\"), \n      cell_text(color = \"#E81828\")\n      ),\n    locations = cells_body(\n      rows = Tm == \"Philadelphia Phillies\")\n  )\n\n\n\n\n\n  \n    \n      The Phillies were a mid-tier National League team in the 2022 regular season\n    \n    \n      Philadelphia played just good enough to make the playoffs\n    \n  \n  \n    \n      Tm\n      W\n      L\n      GB\n    \n  \n  \n    Los Angeles Dodgers\n111\n51\n+24.0\n    Atlanta Braves\n101\n61\n+14.0\n    New York Mets\n101\n61\n+14.0\n    St. Louis Cardinals\n93\n69\n+6.0\n    San Diego Padres\n89\n73\n+2.0\n    Philadelphia Phillies\n87\n75\n--\n    Milwaukee Brewers\n86\n76\n1.0\n    San Francisco Giants\n81\n81\n6.0\n    Chicago Cubs\n74\n88\n13.0\n    Arizona Diamondbacks\n74\n88\n13.0\n    Miami Marlins\n69\n93\n18.0\n    Colorado Rockies\n68\n94\n19.0\n    Cincinnati Reds\n62\n100\n25.0\n    Pittsburgh Pirates\n62\n100\n25.0\n    Washington Nationals\n55\n107\n32.0\n  \n  \n    \n      By: Lucas Wilkinson  |  Source: Sports Reference\n    \n  \n  \n\n\n\n\n\nStandings <- NLStandings %>% \n  separate(\"500\", into=c(\"Wins\", \"Losses\"), sep=\"-\") \n\n\nChartData <- Standings %>% \n  select(\n    Tm, W, Wins\n  ) %>% mutate(Wins = as.numeric(Wins)) %>%\n  rename(`Total Wins` = W, `Quality Wins` = Wins) %>%\n  mutate(Wins = `Total Wins` - `Quality Wins`) %>%\n  select(Tm, Wins, `Quality Wins`)\n\n\nChartData %>% \n  pivot_longer(\n    cols=-Tm, \n    names_to=\"Type\", \n    values_to=\"Total\") -> Stacked\n\n\nggplot() + \n  geom_bar(\n    data=Stacked, \n    aes(x=reorder(Tm,Total), weight=Total, fill=Type)) + \n  scale_fill_manual(values = c(\"#002D72\", \"#E81828\")) + \n  coord_flip() + \n  labs(\n    x=\"\", \n    y=\"Total Wins\", \n    title=\"Phillies did not beat many quality \\nteams in the regular season.\", \n    subtitle=\"Philadelphia was near the bottom of the National League vs. teams >.500\",\n    caption = \"Source: Sports Reference | By Lucas Wilkinson\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 20, face = \"bold\"),\n    plot.title.position = \"plot\" , \n    axis.title = element_text(size = 8, face = \"bold\"), \n    plot.subtitle = element_text(size=12), \n    panel.grid.minor = element_blank() \n  )\n\n\n\n\nI want to use team ERA and batting average to see if it correlates to wins, and I want to know where the Phucking Phillies are at on this list.\n\nmlb_hitting <- read_csv(\"~/Documents/SPMC 350 - Fall 2022/MLB-HITTING.csv\") \n\nRows: 30 Columns: 29\nâ”€â”€ Column specification â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\nDelimiter: \",\"\nchr  (1): Tm\ndbl (28): #Bat, BatAge, R/G, G, PA, AB, R, H, 2B, 3B, HR, RBI, SB, CS, BB, S...\n\nâ„¹ Use `spec()` to retrieve the full column specification for this data.\nâ„¹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nmlb_pitching <- read_csv(\"~/Documents/SPMC 350 - Fall 2022/mlb-pitching.csv\")\n\nRows: 30 Columns: 36\nâ”€â”€ Column specification â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\nDelimiter: \",\"\nchr  (1): Tm\ndbl (35): #P, PAge, RA/G, W, L, W-L%, ERA, G, GS, GF, CG, tSho, cSho, SV, IP...\n\nâ„¹ Use `spec()` to retrieve the full column specification for this data.\nâ„¹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncombined <- mlb_hitting %>% inner_join(mlb_pitching, by = c(\"Tm\", \"G\"))\n\n\nph <- mlb_hitting %>% filter(Tm == \"Philadelphia Phillies\")\n\npi <- mlb_pitching %>% filter(Tm == \"Philadelphia Phillies\")\n\nphils <- combined %>% filter(Tm == \"Philadelphia Phillies\")\n\n\nggplot() + \n  geom_point(data=combined, aes(x=ERA, y=BA)) +\n    geom_point(data=phils, aes(x=ERA, y=BA), color=\"#E81828\") +\n  coord_flip()+ \n  \n  geom_point(data=phils, aes(x=`ERA`, y=`BA`), color=\"#E81828\") + \n  geom_text_repel(data=phils, aes(x=`ERA`, y=`BA`, label=\"Phillies\")) +\n    \n  geom_vline(xintercept = 3.96) + \n  geom_hline(yintercept = .243) +\n  \n  labs(\n    x=\"ERA\", \n    y=\"Offensive Batting Average\", \n    title=\"Philadelphia was average in team ERA, \\nnot amazing at hitting.\", \n    subtitle=\"The Phillies had an okay regular season in many aspects.\",\n    caption = \"Source: Sports Reference | By Lucas Wilkinson\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 20, face = \"bold\"),\n    axis.title = element_text(size = 8, face = \"bold\"), \n    plot.subtitle = element_text(size=10,) \n  )"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog1",
    "section": "",
    "text": "My NCAA bracket predictions (not good)\n\n\n\n\n\n\n\nmodels\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nApr 25, 2023\n\n\nLucas Wilkinson\n\n\n\n\n\n\n  \n\n\n\n\nWho was the best player on the 1986 Mets?\n\n\n\n\n\n\n\nmets\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nDec 4, 2022\n\n\nLucas Wilkinson\n\n\n\n\n\n\n  \n\n\n\n\nThe MLB regular season is useless.\n\n\n\n\n\n\n\nphillies\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nNov 6, 2022\n\n\nLucas Wilkinson\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Massive-Assignment1.html",
    "href": "Massive-Assignment1.html",
    "title": "Lucas Wilkinson | Blog",
    "section": "",
    "text": "NLStandings <- read_csv(\"~/Documents/SPMC 350 - Fall 2022/NationalLeagueStandings2.csv\") %>%\n  filter(Rk > 0 )\n\nRows: 16 Columns: 30\nâ”€â”€ Column specification â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\nDelimiter: \",\"\nchr (20): Tm, GB, GBsum, Strk, pythWL, vEast, vCent, vWest, Inter, Home, Roa...\ndbl (10): Rk, W, L, W-L%, R, RA, Rdiff, SOS, SRS, Luck\n\nâ„¹ Use `spec()` to retrieve the full column specification for this data.\nâ„¹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nRight here I want to make a table of the NL 2022 standings, with the Phillies highlighted Phillie color showing how they were mid during the regular season.\n\nSimpleStandings <- NLStandings %>% \n  select(Tm, W, L, GB)\n\n\nSimpleStandings %>% \n  gt() %>% \n  tab_header(\n    title = \"The Phillies were a mid-tier National League team in the 2022 regular season\",\n    subtitle = \"Philadelphia played just good enough to make the playoffs\"\n  ) %>% tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n)%>% tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %>%\n  tab_source_note(\n    source_note = md(\"**By:** Lucas Wilkinson  |  **Source:** [Sports Reference](https://www.baseball-reference.com/leagues/NL/2022-standings.shtml)\")\n  ) %>%\ntab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) %>%\n  opt_row_striping() %>% \n  opt_table_lines(\"none\") %>%\n\n  tab_style(\n    style = list(\n      cell_fill(color = \"#002D72\"), \n      cell_text(color = \"#E81828\")\n      ),\n    locations = cells_body(\n      rows = Tm == \"Philadelphia Phillies\")\n  )\n\n\n\n\n\n  \n    \n      The Phillies were a mid-tier National League team in the 2022 regular season\n    \n    \n      Philadelphia played just good enough to make the playoffs\n    \n  \n  \n    \n      Tm\n      W\n      L\n      GB\n    \n  \n  \n    Los Angeles Dodgers\n111\n51\n+24.0\n    Atlanta Braves\n101\n61\n+14.0\n    New York Mets\n101\n61\n+14.0\n    St. Louis Cardinals\n93\n69\n+6.0\n    San Diego Padres\n89\n73\n+2.0\n    Philadelphia Phillies\n87\n75\n--\n    Milwaukee Brewers\n86\n76\n1.0\n    San Francisco Giants\n81\n81\n6.0\n    Chicago Cubs\n74\n88\n13.0\n    Arizona Diamondbacks\n74\n88\n13.0\n    Miami Marlins\n69\n93\n18.0\n    Colorado Rockies\n68\n94\n19.0\n    Cincinnati Reds\n62\n100\n25.0\n    Pittsburgh Pirates\n62\n100\n25.0\n    Washington Nationals\n55\n107\n32.0\n  \n  \n    \n      By: Lucas Wilkinson  |  Source: Sports Reference\n    \n  \n  \n\n\n\n\n\nStandings <- NLStandings %>% \n  separate(\"500\", into=c(\"Wins\", \"Losses\"), sep=\"-\") \n\n\nChartData <- Standings %>% \n  select(\n    Tm, W, Wins\n  ) %>% mutate(Wins = as.numeric(Wins)) %>%\n  rename(`Total Wins` = W, `Quality Wins` = Wins) %>%\n  mutate(Wins = `Total Wins` - `Quality Wins`) %>%\n  select(Tm, Wins, `Quality Wins`)\n\n\nChartData %>% \n  pivot_longer(\n    cols=-Tm, \n    names_to=\"Type\", \n    values_to=\"Total\") -> Stacked\n\n\nggplot() + \n  geom_bar(\n    data=Stacked, \n    aes(x=reorder(Tm,Total), weight=Total, fill=Type)) + \n  scale_fill_manual(values = c(\"#002D72\", \"#E81828\")) + \n  coord_flip() + \n  labs(\n    x=\"\", \n    y=\"Total Wins\", \n    title=\"Phillies did not beat many quality \\nteams in the regular season.\", \n    subtitle=\"Philadelphia was near the bottom of the National League vs. teams >.500\",\n    caption = \"Source: Sports Reference | By Lucas Wilkinson\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 20, face = \"bold\"),\n    plot.title.position = \"plot\" , \n    axis.title = element_text(size = 8, face = \"bold\"), \n    plot.subtitle = element_text(size=12), \n    panel.grid.minor = element_blank() \n  )\n\n\n\n\nI want to use team ERA and batting average to see if it correlates to wins, and I want to know where the Phucking Phillies are at on this list.\n\nmlb_hitting <- read_csv(\"~/Documents/SPMC 350 - Fall 2022/MLB-HITTING.csv\") \n\nRows: 30 Columns: 29\nâ”€â”€ Column specification â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\nDelimiter: \",\"\nchr  (1): Tm\ndbl (28): #Bat, BatAge, R/G, G, PA, AB, R, H, 2B, 3B, HR, RBI, SB, CS, BB, S...\n\nâ„¹ Use `spec()` to retrieve the full column specification for this data.\nâ„¹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nmlb_pitching <- read_csv(\"~/Documents/SPMC 350 - Fall 2022/mlb-pitching.csv\")\n\nRows: 30 Columns: 36\nâ”€â”€ Column specification â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\nDelimiter: \",\"\nchr  (1): Tm\ndbl (35): #P, PAge, RA/G, W, L, W-L%, ERA, G, GS, GF, CG, tSho, cSho, SV, IP...\n\nâ„¹ Use `spec()` to retrieve the full column specification for this data.\nâ„¹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncombined <- mlb_hitting %>% inner_join(mlb_pitching, by = c(\"Tm\", \"G\"))\n\n\nph <- mlb_hitting %>% filter(Tm == \"Philadelphia Phillies\")\n\npi <- mlb_pitching %>% filter(Tm == \"Philadelphia Phillies\")\n\nphils <- combined %>% filter(Tm == \"Philadelphia Phillies\")\n\n\nggplot() + \n  geom_point(data=combined, aes(x=ERA, y=BA)) +\n    geom_point(data=phils, aes(x=ERA, y=BA), color=\"#E81828\") +\n  coord_flip()+ \n  \n  geom_point(data=phils, aes(x=`ERA`, y=`BA`), color=\"#E81828\") + \n  geom_text_repel(data=phils, aes(x=`ERA`, y=`BA`, label=\"Phillies\")) +\n    \n  geom_vline(xintercept = 3.96) + \n  geom_hline(yintercept = .243) +\n  \n  labs(\n    x=\"ERA\", \n    y=\"Offensive Batting Average\", \n    title=\"Philadelphia was average in team ERA, \\nnot amazing at hitting.\", \n    subtitle=\"The Phillies had an okay regular season in many aspects.\",\n    caption = \"Source: Sports Reference | By Lucas Wilkinson\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 20, face = \"bold\"),\n    axis.title = element_text(size = 8, face = \"bold\"), \n    plot.subtitle = element_text(size=10,) \n  )"
  },
  {
    "objectID": "posts/predicting-ncaa-tournament/index.html",
    "href": "posts/predicting-ncaa-tournament/index.html",
    "title": "My NCAA bracket predictions (not good)",
    "section": "",
    "text": "College basketball has been one of my favorite sports to follow closely my whole life. Despite yearly attempts, I have never made a great bracket. This theme stayed true this year as well.\nOur class had a friendly bracket competition using machine learning to predict every single game. I canâ€™t lie, I thought I had a really good chance to finish in the top five of the class. I couldnâ€™t have been more wrong.\nMy mindset going into making my model was to get the testing percentage as high as I could, with team stats that I thought were useful. I didnâ€™t do much research on what the popular team statistics were. I looked at the box score data and included what I thought was important.\nLightGBM was my model choice because the testing percentage was just under XGBoost, while taking way less time to run the code.\n\n\nCode\nlibrary(tidyverse)\nlibrary(hoopR)\nlibrary(zoo)\nlibrary(tidymodels)\nlibrary(bonsai)\nlibrary(janitor)\nlibrary(gt)\n\nset.seed(1234)\n\n\ngames <- load_mbb_team_box(2015:2023) \n\ngameswithpossession <- games %>% \n  filter(game_date < as.Date(\"2023-03-14\")) %>%\n  mutate(\n    possessions = field_goals_attempted - offensive_rebounds + turnovers + (.475 * free_throws_attempted),\n    ppp = team_score/possessions,\n    eFGp = (field_goals_made +.5 * three_point_field_goals_made) / field_goals_attempted,\n    assistTurnover = assists/turnovers,\n    offrebP = offensive_rebounds/possessions,\n    defrebP = defensive_rebounds/possessions,\n    defense = steals+blocks\n  ) %>%\n  filter(possessions <= 90 & possessions >= 53)\n\n\nplayers <- load_mbb_player_box(2015:2023)\n\nplayervalues <- players %>%\n  filter(minutes > 0) %>%\n  mutate(\n    value = points + rebounds + steals + blocks - turnovers - (field_goals_attempted-field_goals_made) - (free_throws_attempted-free_throws_made)\n  ) %>%\n  group_by(game_id) %>%\n  summarize(\n    team_median_player_value = median(value),\n    team_average_player_value = mean(value),\n    team_max_player_value = max(value)\n  )\n\ngameswithpossession <- gameswithpossession %>% inner_join(playervalues)\n\nrollingteamstats <- gameswithpossession %>% \n  arrange(game_date) %>%\n  group_by(team_short_display_name, season) %>%\n  mutate(\n    team_rolling_ppp = rollmean(lag(ppp, n=1), k=10, align=\"right\", fill=NA),\n    team_rolling_eFGp = rollmean(lag(eFGp, n=1), k=10, align=\"right\", fill=NA),\n    team_rolling_at = rollmean(lag(assistTurnover, n=1), k=10, align=\"right\", fill=NA),\n    team_rolling_or = rollmean(lag(offrebP, n=1), k=10, align=\"right\", fill=NA),\n    team_rolling_threeP = rollmean(lag(three_point_field_goal_pct, n=1), k=10, align=\"right\", fill=NA),\n    team_rolling_ftP = rollmean(lag(free_throw_pct, n=1), k=10, align=\"right\", fill=NA),\n    team_rolling_defrebp = rollmean(lag(defrebP, n=1), k=10, align=\"right\", fill=NA),\n    team_rolling_defense = rollmean(lag(defense, n=1), k=10, align=\"right\", fill=NA)\n   ) %>% \n  ungroup() \n\nteam_side <- rollingteamstats %>%\n  select(\n    game_id,\n    team_id, \n    team_short_display_name, \n    opponent_team_id, \n    game_date, \n    season, \n    team_score, \n    team_rolling_eFGp,\n    team_rolling_ppp,\n    team_rolling_at,\n    team_rolling_threeP,\n    team_rolling_or,\n    team_rolling_ftP,\n    team_rolling_defrebp,\n    team_rolling_defense,\n    offensive_rebounds,\n    defensive_rebounds,\n    possessions\n    ) %>% \n  rename(\n    team_possessions = possessions,\n    team_offensive_rebounds = offensive_rebounds,\n    team_defensive_rebounds = defensive_rebounds\n  )\n\nopponent_side <- team_side %>%\n  select(-opponent_team_id) %>% \n  rename(\n    opponent_team_id = team_id,\n    opponent_short_display_name = team_short_display_name,\n    opponent_score = team_score,\n    opponent_possessions = team_possessions,\n    opponent_rolling_ppp = team_rolling_ppp,\n    opponent_rolling_eFGp = team_rolling_eFGp,\n    opponent_rolling_at = team_rolling_at,\n    opponent_rolling_or = team_rolling_or,\n    opponent_rolling_threeP = team_rolling_threeP,\n    opponent_rolling_ftP = team_rolling_ftP,\n    opponent_rolling_defrebp = team_rolling_defrebp,\n    opponent_rolling_defense = team_rolling_defense,\n    opponent_offensive_rebounds = team_offensive_rebounds,\n    opponent_defensive_rebounds = team_defensive_rebounds\n  ) \n\ngameswithsides <- team_side %>% inner_join(opponent_side)\n\ngameswithsides <- gameswithsides %>% mutate(\n  team_result = as.factor(case_when(\n    team_score > opponent_score ~ \"W\",\n    opponent_score > team_score ~ \"L\"\n))\n)\n\nteammargins <- gameswithsides %>% \n  arrange(game_date) %>%\n  group_by(team_short_display_name, season) %>%\n  mutate(\n    team_score_differential = team_score - opponent_score,\n    team_cumulative_score_differential = lag(cummean(team_score_differential), n=1)\n  ) %>% \n  ungroup() %>%\n  select(game_id, team_short_display_name, team_cumulative_score_differential)\n\nopponentmargins <- teammargins %>%\n  rename(\n    opponent_short_display_name = team_short_display_name,\n    opponent_cumulative_score_differential = team_cumulative_score_differential\n    )\n\ngameswithsides <- gameswithsides %>% inner_join(teammargins)\ngameswithsides <- gameswithsides %>% inner_join(opponentmargins)\n\n\ngameswithsides$team_result <- relevel(gameswithsides$team_result, ref=\"W\")\n\nmodelgames <- gameswithsides %>% \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_short_display_name, \n    season, \n    team_rolling_ppp, \n    opponent_rolling_ppp, \n    team_result,\n    team_rolling_eFGp,\n    opponent_rolling_eFGp,\n    team_rolling_at,\n    opponent_rolling_at,\n    team_rolling_or,\n    opponent_rolling_or,\n    team_rolling_threeP,\n    opponent_rolling_threeP,\n    team_rolling_ftP,\n    opponent_rolling_ftP,\n    team_rolling_defrebp,\n    opponent_rolling_defrebp,\n    team_rolling_defense,\n    opponent_rolling_defense,\n    team_cumulative_score_differential,\n    opponent_cumulative_score_differential,\n    team_result\n    ) %>% na.omit()\n\ngame_split <- initial_split(modelgames, prop = .8)\ngame_train <- training(game_split)\ngame_test <- testing(game_split)\n\n\nlightgbm_mod <- \n  boost_tree() %>%\n  set_engine(\"lightgbm\") %>%\n  set_mode(mode = \"classification\")\n\n\ngame_recipe <- \n  recipe(team_result ~ ., data = game_train) %>% \n  update_role(game_id, game_date, team_short_display_name, opponent_short_display_name, season, new_role = \"ID\") %>%\n  step_normalize(all_predictors())\n\n\nlightgbm_workflow <- \n  workflow() %>% \n  add_model(lightgbm_mod) %>% \n  add_recipe(game_recipe)\n\n\ngame_folds <- vfold_cv(game_train)\n\n\nlightgbm_fit <- \n  lightgbm_workflow %>% \n  fit(data = game_train)\n\nrollingteamstats <- gameswithpossession %>% \n  arrange(game_date) %>%\n  group_by(team_short_display_name, season) %>%\n  mutate(\n    team_rolling_ppp = rollmean(ppp,k=10, align=\"right\", fill=NA),\n    team_rolling_eFGp = rollmean(eFGp,  k=10, align=\"right\", fill=NA),\n    team_rolling_at = rollmean(assistTurnover,  k=10, align=\"right\", fill=NA),\n    team_rolling_or = rollmean(offrebP,  k=10, align=\"right\", fill=NA),\n    team_rolling_threeP = rollmean(three_point_field_goal_pct,  k=10, align=\"right\", fill=NA),\n    team_rolling_ftP = rollmean(free_throw_pct, k=10, align=\"right\", fill=NA),\n    team_rolling_defrebp = rollmean(defrebP, k=10, align=\"right\", fill=NA),\n    team_rolling_defense = rollmean(defense, k=10, align=\"right\", fill=NA)\n   ) %>% \n  ungroup() \n\nteam_side <- rollingteamstats %>%\n  select(\n    game_id,\n    team_id, \n    team_short_display_name, \n    opponent_team_id, \n    game_date, \n    season, \n    team_score, \n    team_rolling_eFGp,\n    team_rolling_ppp,\n    team_rolling_at,\n    team_rolling_threeP,\n    team_rolling_or,\n    team_rolling_ftP,\n    team_rolling_defrebp,\n    team_rolling_defense,\n    offensive_rebounds,\n    defensive_rebounds,\n    possessions,\n    ) %>% \n  rename(\n    team_possessions = possessions,\n    team_offensive_rebounds = offensive_rebounds,\n    team_defensive_rebounds = defensive_rebounds\n  )\n\nopponent_side <- team_side %>%\n  select(-opponent_team_id) %>% \n  rename(\n    opponent_team_id = team_id,\n    opponent_short_display_name = team_short_display_name,\n    opponent_score = team_score,\n    opponent_possessions = team_possessions,\n    opponent_rolling_ppp = team_rolling_ppp,\n    opponent_rolling_eFGp = team_rolling_eFGp,\n    opponent_rolling_at = team_rolling_at,\n    opponent_rolling_or = team_rolling_or,\n    opponent_rolling_threeP = team_rolling_threeP,\n    opponent_rolling_ftP = team_rolling_ftP,\n    opponent_rolling_defrebp = team_rolling_defrebp,\n    opponent_rolling_defense = team_rolling_defense,\n    opponent_offensive_rebounds = team_offensive_rebounds,\n    opponent_defensive_rebounds = team_defensive_rebounds\n  )\n\ngameswithsides <- team_side %>% inner_join(opponent_side)\n\ngameswithsides <- gameswithsides %>% mutate(\n  team_result = as.factor(case_when(\n    team_score > opponent_score ~ \"W\",\n    opponent_score > team_score ~ \"L\"\n))\n)\n\nteammargins <- gameswithsides %>% \n  arrange(game_date) %>%\n  group_by(team_short_display_name, season) %>%\n  mutate(\n    team_score_differential = team_score - opponent_score,\n    team_cumulative_score_differential = cummean(team_score_differential)\n  ) %>% \n  ungroup() %>%\n  select(game_id, team_short_display_name, team_cumulative_score_differential)\n\nopponentmargins <- teammargins %>%\n  rename(\n    opponent_short_display_name = team_short_display_name,\n    opponent_cumulative_score_differential = team_cumulative_score_differential\n    )\n\ngameswithsides <- gameswithsides %>% inner_join(teammargins)\ngameswithsides <- gameswithsides %>% inner_join(opponentmargins)\n\n\ngameswithsides$team_result <- relevel(gameswithsides$team_result, ref=\"W\")\n\nmodelgames <- gameswithsides %>% \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_short_display_name, \n    season, \n    team_rolling_ppp, \n    opponent_rolling_ppp, \n    team_result,\n    team_rolling_eFGp,\n    opponent_rolling_eFGp,\n    team_rolling_at,\n    opponent_rolling_at,\n    team_rolling_or,\n    opponent_rolling_or,\n    team_rolling_threeP,\n    opponent_rolling_threeP,\n    team_rolling_ftP,\n    opponent_rolling_ftP,\n    team_rolling_defrebp,\n    opponent_rolling_defrebp,\n    team_rolling_defense,\n    opponent_rolling_defense,\n    team_cumulative_score_differential,\n    opponent_cumulative_score_differential,\n    team_result\n    ) %>% na.omit()\n\nmidwestround1games <- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"N Kentucky\"\n) %>% add_row(\n  team_short_display_name=\"Iowa\",\n  opponent_short_display_name=\"Auburn\"\n) %>% add_row(\n  team_short_display_name=\"Miami\",\n  opponent_short_display_name=\"Drake\"\n)%>% add_row(\n  team_short_display_name=\"Indiana\",\n  opponent_short_display_name=\"Kent State\"\n)%>% add_row(\n  team_short_display_name=\"Iowa State\",\n  opponent_short_display_name=\"Pitt\"\n)%>% add_row(\n  team_short_display_name=\"Xavier\",\n  opponent_short_display_name=\"Kennesaw St\"\n)%>% add_row(\n  team_short_display_name=\"Texas A&M\",\n  opponent_short_display_name=\"Penn State\"\n)%>% add_row(\n  team_short_display_name=\"Texas\",\n  opponent_short_display_name=\"Colgate\"\n)\n\nmidwestround1games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(midwestround1games)\n\nmidwestround1games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(midwestround1games) \n\nmidwestround1 <- lightgbm_fit %>% \n  predict(new_data = midwestround1games) %>%\n  bind_cols(midwestround1games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround1 <- lightgbm_fit %>%\n  predict(new_data = midwestround1games, type=\"prob\") %>%\n  bind_cols(midwestround1) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround2games <- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"Iowa\"\n) %>% add_row(\n  team_short_display_name=\"Drake\",\n  opponent_short_display_name=\"Kent State\"\n) %>% add_row(\n  team_short_display_name=\"Pitt\",\n  opponent_short_display_name=\"Xavier\"\n)%>% add_row(\n  team_short_display_name=\"Penn State\",\n  opponent_short_display_name=\"Colgate\"\n)\n\nmidwestround2games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(midwestround2games)\n\nmidwestround2games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(midwestround2games) \n\nmidwestround2 <- lightgbm_fit %>% \n  predict(new_data = midwestround2games) %>%\n  bind_cols(midwestround2games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround2 <- lightgbm_fit %>%\n  predict(new_data = midwestround2games, type=\"prob\") %>%\n  bind_cols(midwestround2) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround3games <- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"Drake\"\n) %>% add_row(\n  team_short_display_name=\"Xavier\",\n  opponent_short_display_name=\"Colgate\"\n) \nmidwestround3games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(midwestround3games)\n\nmidwestround3games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(midwestround3games) \n\nmidwestround3 <- lightgbm_fit %>% \n  predict(new_data = midwestround3games) %>%\n  bind_cols(midwestround3games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround3 <- lightgbm_fit %>%\n  predict(new_data = midwestround3games, type=\"prob\") %>%\n  bind_cols(midwestround3) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround4games <- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"Colgate\"\n) \n\nmidwestround4games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(midwestround4games)\n\nmidwestround4games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(midwestround4games) \n\nmidwestround4 <- lightgbm_fit %>% \n  predict(new_data = midwestround4games) %>%\n  bind_cols(midwestround4games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround4 <- lightgbm_fit %>%\n  predict(new_data = midwestround4games, type=\"prob\") %>%\n  bind_cols(midwestround4) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nwestround1games <- tibble(\n  team_short_display_name=\"Kansas\",\n  opponent_short_display_name=\"Howard\"\n) %>% add_row(\n  team_short_display_name=\"Arkansas\",\n  opponent_short_display_name=\"Illinois\"\n) %>% add_row(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_short_display_name=\"VCU\"\n)%>% add_row(\n  team_short_display_name=\"UConn\",\n  opponent_short_display_name=\"Iona\"\n)%>% add_row(\n  team_short_display_name=\"TCU\",\n  opponent_short_display_name=\"Nevada\"\n)%>% add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_short_display_name=\"Grand Canyon\"\n)%>% add_row(\n  team_short_display_name=\"Northwestern\",\n  opponent_short_display_name=\"Boise St\"\n)%>% add_row(\n  team_short_display_name=\"UCLA\",\n  opponent_short_display_name=\"UNC Asheville\"\n)%>% add_row(\n  team_short_display_name=\"Arizona St\",\n  opponent_short_display_name=\"Nevada\"\n)\n\nwestround1games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(westround1games)\n\nwestround1games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(westround1games) \n\nwestround1 <- lightgbm_fit %>% \n  predict(new_data = westround1games) %>%\n  bind_cols(westround1games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround1 <- lightgbm_fit %>%\n  predict(new_data = westround1games, type=\"prob\") %>%\n  bind_cols(westround1) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nwestround2games <- tibble(\n  team_short_display_name=\"Kansas\",\n  opponent_short_display_name=\"Arkansas\"\n) %>% add_row(\n  team_short_display_name=\"VCU\",\n  opponent_short_display_name=\"Iona\"\n)%>% add_row(\n  team_short_display_name=\"Nevada\",\n  opponent_short_display_name=\"Gonzaga\"\n)%>% add_row(\n  team_short_display_name=\"Northwestern\",\n  opponent_short_display_name=\"UCLA\"\n)\nwestround2games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(westround2games)\n\nwestround2games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(westround2games) \n\nwestround2 <- lightgbm_fit %>% \n  predict(new_data = westround2games) %>%\n  bind_cols(westround2games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround2 <- lightgbm_fit %>%\n  predict(new_data = westround2games, type=\"prob\") %>%\n  bind_cols(westround2) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nwestround3games <- tibble(\n  team_short_display_name=\"Arkansas\",\n  opponent_short_display_name=\"VCU\"\n) %>% add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_short_display_name=\"UCLA\"\n) \nwestround3games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(westround3games)\n\nwestround3games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(westround3games) \n\nwestround3 <- lightgbm_fit %>% \n  predict(new_data = westround3games) %>%\n  bind_cols(westround3games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround3 <- lightgbm_fit %>%\n  predict(new_data = westround3games, type=\"prob\") %>%\n  bind_cols(westround3) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nwestround4games <- tibble(\n  team_short_display_name=\"VCU\",\n  opponent_short_display_name=\"Gonzaga\"\n) \n\nwestround4games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(westround4games)\n\nwestround4games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(westround4games) \n\nwestround4 <- lightgbm_fit %>% \n  predict(new_data = westround4games) %>%\n  bind_cols(westround4games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround4 <- lightgbm_fit %>%\n  predict(new_data = westround4games, type=\"prob\") %>%\n  bind_cols(westround4) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround1games <- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Texas A&M-CC\"\n) %>% add_row(\n  team_short_display_name=\"Maryland\",\n  opponent_short_display_name=\"West Virginia\"\n) %>% add_row(\n  team_short_display_name=\"San Diego State\",\n  opponent_short_display_name=\"Charleston\"\n)%>% add_row(\n  team_short_display_name=\"Virginia\",\n  opponent_short_display_name=\"Furman\"\n)%>% add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_short_display_name=\"NC State\"\n)%>% add_row(\n  team_short_display_name=\"Baylor\",\n  opponent_short_display_name=\"UCSB\"\n)%>% add_row(\n  team_short_display_name=\"Missouri\",\n  opponent_short_display_name=\"Utah State\"\n)%>% add_row(\n  team_short_display_name=\"Arizona\",\n  opponent_short_display_name=\"Princeton\"\n)\n\nsouthround1games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(southround1games)\n\nsouthround1games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(southround1games) \n\nsouthround1 <- lightgbm_fit %>% \n  predict(new_data = southround1games) %>%\n  bind_cols(southround1games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround1 <- lightgbm_fit %>%\n  predict(new_data = southround1games, type=\"prob\") %>%\n  bind_cols(southround1) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround2games <- tibble(\n  team_short_display_name=\"Texas A&M-CC\",\n  opponent_short_display_name=\"Maryland\"\n) %>% add_row(\n  team_short_display_name=\"Charleston\",\n  opponent_short_display_name=\"Furman\"\n)%>% add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_short_display_name=\"UCSB\"\n)%>% add_row(\n  team_short_display_name=\"Utah State\",\n  opponent_short_display_name=\"Arizona\"\n)\nsouthround2games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(southround2games)\n\nsouthround2games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(southround2games) \n\nsouthround2 <- lightgbm_fit %>% \n  predict(new_data = southround2games) %>%\n  bind_cols(southround2games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround2 <- lightgbm_fit %>%\n  predict(new_data = southround2games, type=\"prob\") %>%\n  bind_cols(southround2) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nsouthround3games <- tibble(\n  team_short_display_name=\"Texas A&M-CC\",\n  opponent_short_display_name=\"Charleston\"\n) %>% add_row(\n  team_short_display_name=\"UCSB\",\n  opponent_short_display_name=\"Utah State\"\n) \nsouthround3games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(southround3games)\n\nsouthround3games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(southround3games) \n\nsouthround3 <- lightgbm_fit %>% \n  predict(new_data = southround3games) %>%\n  bind_cols(southround3games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround3 <- lightgbm_fit %>%\n  predict(new_data = southround3games, type=\"prob\") %>%\n  bind_cols(southround3) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nsouthround4games <- tibble(\n  team_short_display_name=\"Charleston\",\n  opponent_short_display_name=\"Utah State\"\n) \n\nsouthround4games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(southround4games)\n\nsouthround4games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(southround4games) \n\nsouthround4 <- lightgbm_fit %>% \n  predict(new_data = southround4games) %>%\n  bind_cols(southround4games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround4 <- lightgbm_fit %>%\n  predict(new_data = southround4games, type=\"prob\") %>%\n  bind_cols(southround4) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\neastround1games <- tibble(\n  team_short_display_name=\"Texas Southern\",\n  opponent_short_display_name=\"Fair Dickinson\"\n) %>% add_row(\n  team_short_display_name=\"FAU\",\n  opponent_short_display_name=\"Memphis\"\n) %>% add_row(\n  team_short_display_name=\"Duke\",\n  opponent_short_display_name=\"Oral Roberts\"\n)%>% add_row(\n  team_short_display_name=\"Tennessee\",\n  opponent_short_display_name=\"Louisiana\"\n)%>% add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_short_display_name=\"Providence\"\n)%>% add_row(\n  team_short_display_name=\"Kansas St\",\n  opponent_short_display_name=\"Montana St\"\n)%>% add_row(\n  team_short_display_name=\"Michigan St\",\n  opponent_short_display_name=\"USC\"\n)%>% add_row(\n  team_short_display_name=\"Marquette\",\n  opponent_short_display_name=\"Vermont\"\n)%>% add_row(\n  team_short_display_name=\"Purdue\",\n  opponent_short_display_name=\"Fair Dickinson\"\n)\n\neastround1games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(eastround1games)\n\neastround1games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(eastround1games) \n\neastround1 <- lightgbm_fit %>% \n  predict(new_data = eastround1games) %>%\n  bind_cols(eastround1games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround1 <- lightgbm_fit %>%\n  predict(new_data = eastround1games, type=\"prob\") %>%\n  bind_cols(eastround1) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\neastround2games <- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_short_display_name=\"FAU\"\n) %>% add_row(\n  team_short_display_name=\"Oral Roberts\",\n  opponent_short_display_name=\"Tennessee\"\n)%>% add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_short_display_name=\"Montana St\"\n)%>% add_row(\n  team_short_display_name=\"USC\",\n  opponent_short_display_name=\"Vermont\"\n)\neastround2games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(eastround2games)\n\neastround2games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(eastround2games) \n\neastround2 <- lightgbm_fit %>% \n  predict(new_data = eastround2games) %>%\n  bind_cols(eastround2games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround2 <- lightgbm_fit %>%\n  predict(new_data = eastround2games, type=\"prob\") %>%\n  bind_cols(eastround2) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\neastround3games <- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_short_display_name=\"Oral Roberts\"\n) %>% add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_short_display_name=\"Vermont\"\n) \neastround3games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(eastround3games)\n\neastround3games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(eastround3games) \n\neastround3 <- lightgbm_fit %>% \n  predict(new_data = eastround3games) %>%\n  bind_cols(eastround3games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround3 <- lightgbm_fit %>%\n  predict(new_data = eastround3games, type=\"prob\") %>%\n  bind_cols(eastround3) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\neastround4games <- tibble(\n  team_short_display_name=\"Oral Roberts\",\n  opponent_short_display_name=\"Vermont\"\n) \n\neastround4games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(eastround4games)\n\neastround4games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(eastround4games) \n\neastround4 <- lightgbm_fit %>% \n  predict(new_data = eastround4games) %>%\n  bind_cols(eastround4games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround4 <- lightgbm_fit %>%\n  predict(new_data = eastround4games, type=\"prob\") %>%\n  bind_cols(eastround4) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nfinalfourgames <- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"Gonzaga\"\n) %>% add_row(\n  team_short_display_name=\"Charleston\",\n  opponent_short_display_name=\"Oral Roberts\"\n) \nfinalfourgames <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(finalfourgames)\n\nfinalfourgames <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(finalfourgames) \n\nfinalfour <- lightgbm_fit %>% \n  predict(new_data = finalfourgames) %>%\n  bind_cols(finalfourgames) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nfinalfour <- lightgbm_fit %>%\n  predict(new_data = finalfourgames, type=\"prob\") %>%\n  bind_cols(finalfour) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nchampsgame <- tibble(\n  team_short_display_name=\"Gonzaga\",\n  opponent_short_display_name=\"Oral Roberts\"\n) \n\nchampsgame <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(champsgame)\n\nchampsgame <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  ungroup() %>%\n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(champsgame) \n\nchamps <- lightgbm_fit %>% \n  predict(new_data = champsgame) %>%\n  bind_cols(champsgame) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nchamps <- lightgbm_fit %>%\n  predict(new_data = champsgame, type=\"prob\") %>%\n  bind_cols(champs) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nAssist-to-turnover ratio is one team stat that was a predictor in my model. A good team assist-to-turnover ratio is 2:1, meaning that the team has twice as many assists as turnovers. The graph below shows a direct correlation between team wins and assist-to-turnover ratio.\n\n\nCode\nggplot() + \n  geom_point(\n    data=modelgames, aes(x=team_rolling_at, y=opponent_rolling_at, color=team_result))  \n\n\n\n\n\nAssist-to-turnover ratio is not the only statistic I used in my model. This Table shows all of the predictors that I used to try to correctly pick the winners of these basketball games.\n\n\nCode\nsummary(game_recipe) %>%\n  select(variable, role) %>% \n  filter(role != \"ID\") %>%\n  gt() %>%\n  tab_header(\n    title = \"The predictors\",\n    subtitle = \"Mostly offensive stats, but also has a defensive metric.\"\n  ) %>%  \n  tab_source_note(\n    source_note = md(\"**By:** Lucas Wilkinson\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %>%\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) %>%\n  opt_row_striping() %>% \n  opt_table_lines(\"none\")\n\n\n\n\n\n\n  \n    \n      The predictors\n    \n    \n      Mostly offensive stats, but also has a defensive metric.\n    \n  \n  \n    \n      variable\n      role\n    \n  \n  \n    team_rolling_ppp\npredictor\n    opponent_rolling_ppp\npredictor\n    team_rolling_eFGp\npredictor\n    opponent_rolling_eFGp\npredictor\n    team_rolling_at\npredictor\n    opponent_rolling_at\npredictor\n    team_rolling_or\npredictor\n    opponent_rolling_or\npredictor\n    team_rolling_threeP\npredictor\n    opponent_rolling_threeP\npredictor\n    team_rolling_ftP\npredictor\n    opponent_rolling_ftP\npredictor\n    team_rolling_defrebp\npredictor\n    opponent_rolling_defrebp\npredictor\n    team_rolling_defense\npredictor\n    opponent_rolling_defense\npredictor\n    team_cumulative_score_differential\npredictor\n    opponent_cumulative_score_differential\npredictor\n    team_result\noutcome\n  \n  \n    \n      By: Lucas Wilkinson\n    \n  \n  \n\n\n\n\nI ended up using nine metrics to predict the winners of March Madness games. The nine metrics were; points per possession, effective field goal percentage, assist/turnover ratio, offensive and defensive rebounding percentage, defense (steals/blocks), score differential and free throw percentage.\nThese statistics produced a model that tested correctly around 68% of the time. Every metric included in the LightGBM model helped raise the testing percentage.\nI would have been ecstatic if my bracket predicted 68% of the games right. The south and east regions of the bracket were the two really bad regions for my bracket, with only six correct picks out of the 16 games in those regionsâ€™ first round.\nMy model-made bracket for the class competition this year was in the 5.3 percentile, meaning 94.7% of brackets scored higher than mine.\nOverall, there were 17 participants in our class competition. My model finished 15th out of the 17. My bracket predicted just one Sweet 16 team correctly, which was Gonzaga. That was the last pick that my model predicted correctly.\nThe fault in my model is that I did not take strength of schedule into account, and used too many individual statistics. If I were to do this again, I would implement a strength of schedule metric, while using more all around team stats such as game score and team efficiency rating.\nHopefully there is a little less madness and a lot more correct predictions in next yearsâ€™ Machine Learning Madness attempt."
  }
]